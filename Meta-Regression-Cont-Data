import numpy as np
import pandas as pd
import statsmodels.api as sm
from scipy import stats

# Loading data
data = {
    'Study': ['Gor.', 'Laz.', 'Cost.', 'Car.', 'Laz.', 'Laz.', 'Pis.', 'Bour.', 'Tuf.', 'Azh.', 'Vil.', 'Gam.'],
    'Year': [2001, 2004, 2005, 2005, 2007, 2011, 2015, 2015, 2017, 2020, 2021, 2024],
    'Ro+_Mean': [411, 415, 409, 430.31, 440.5, 458, 417.7, 415.9, 407.8, 400, 420.74, 415],
    'Ro+_SD': [19.4, 21, 30, 25.66, 23.4, 29, 23.1, 24.6, 23.9, 29.6, 24.3, 31],
    'Ro+_N': [49, 31, 32, 14, 26, 25, 55, 283, 15, 63, 46, 101],
    'Ro-_Mean': [403, 419, 409, 424.09, 418.2, 442.8, 414.7, 413.5, 399.8, 398.3, 421.33, 407],
    'Ro-_SD': [24.3, 17, 28, 28.44, 13.2, 23.1, 21.2, 26.5, 23, 25.9, 22.1, 26],
    'Ro-_N': [62, 21, 57, 35, 20, 24, 18, 314, 39, 77, 99, 66],
    'Diagnosis': ['S', 'U', 'U', 'S', 'U', 'S', 'U', 'S', 'U', 'S', 'S', 'U']
}

df = pd.DataFrame(data)

# Calculating Population
df['Population'] = df['Ro+_N'] + df['Ro-_N']

# Converting Diagnosis to numeric format (S=1, U=0)
df['Diagnosis_num'] = df['Diagnosis'].map({'S': 1, 'U': 0})

# Calculating SMD (Hedges' g) and its standard error
def calculate_smd(row):
    # Mean difference
    mean_diff = row['Ro+_Mean'] - row['Ro-_Mean']
    
    # Pooled standard deviation
    pooled_sd = np.sqrt(((row['Ro+_N']-1)*row['Ro+_SD']**2 + (row['Ro-_N']-1)*row['Ro-_SD']**2) / 
                       (row['Ro+_N'] + row['Ro-_N'] - 2))
    
    # Hedges' g (small sample size correction)
    n_total = row['Ro+_N'] + row['Ro-_N']
    j = 1 - 3/(4*(n_total - 2) - 1)  # Correction factor
    smd = mean_diff / pooled_sd * j
    
    # Standard error of SMD
    se_smd = np.sqrt((row['Ro+_N'] + row['Ro-_N'])/(row['Ro+_N']*row['Ro-_N']) + 
                   smd**2/(2*(row['Ro+_N'] + row['Ro-_N'])))
    
    return pd.Series([smd, se_smd])

df[['SMD', 'SE_SMD']] = df.apply(calculate_smd, axis=1)

# Calculating between-study variance (tau²) - DerSimonian-Laird method
weights = 1 / df['SE_SMD']**2
Q = np.sum(weights * (df['SMD'] - np.average(df['SMD'], weights=weights)**2))
df_studies = len(df) - 1
C = np.sum(weights) - np.sum(weights**2)/np.sum(weights)
tau_squared = max(0, (Q - df_studies)/C)

# Weights for random effects model
df['weights_RE'] = 1/(df['SE_SMD']**2 + tau_squared)

# Meta-regression
X = sm.add_constant(df[['Year', 'Population', 'Diagnosis_num']])
model = sm.WLS(df['SMD'], X, weights=df['weights_RE'])
results = model.fit()

# Displaying results
print("Meta-regression results:")
print(results.summary())

print("\nAdditional parameters:")
print(f"Tau² (between-study variance): {tau_squared:.4f}")
print(f"Q-statistic: {Q:.2f} (df = {df_studies})")

# Visualization of SMD with confidence intervals
import matplotlib.pyplot as plt
plt.errorbar(df['SMD'], df['Study'], xerr=1.96*df['SE_SMD'], fmt='o')
plt.axvline(x=0, color='red', linestyle='--')
plt.title('SMD with 95% confidence intervals')
plt.xlabel('SMD (Hedges\' g)')
plt.ylabel('Study')
plt.show()
